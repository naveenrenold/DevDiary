var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _LicenseManager_valid;
import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class LicenseManager {
    constructor(rendererFactory, document) {
        this.rendererFactory = rendererFactory;
        this.document = document;
        _LicenseManager_valid.set(this, false);
        this.renderer = rendererFactory.createRenderer(null, null);
        LicenseManager.prototype['check'] = () => {
            if (!__classPrivateFieldGet(this, _LicenseManager_valid, "f")) {
                const link = this.renderer.createElement('a');
                this.renderer.setAttribute(link, 'href', 'https://primeng.org/lts');
                this.renderer.setStyle(link, 'background-color', 'red');
                this.renderer.setStyle(link, 'color', 'white');
                this.renderer.setStyle(link, 'cursor', 'pointer');
                this.renderer.setStyle(link, 'font-size', '14px');
                this.renderer.setStyle(link, 'font-weight', 'bold');
                this.renderer.setStyle(link, 'position', 'fixed');
                this.renderer.setStyle(link, 'z-index', 1000);
                this.renderer.setStyle(link, 'top', '0');
                this.renderer.setStyle(link, 'left', '0');
                this.renderer.setStyle(link, 'width', '100%');
                this.renderer.setStyle(link, 'padding', '1rem');
                const msg = this.renderer.createElement('marquee');
                this.renderer.setAttribute(msg, 'behavior', 'alternate');
                const text = this.renderer.createText('You are using an LTS version of PrimeNG with an invalid license, you may either switch back to a non-LTS version or purchase a license at PrimeStore.');
                this.renderer.appendChild(msg, text);
                this.renderer.appendChild(link, msg);
                this.renderer.appendChild(this.document.body, link);
            }
        };
        Object.freeze(LicenseManager.prototype);
    }
    verify(licenseKey, passKey) {
        this.aesGcmDecrypt(licenseKey, passKey)
            .then((plaintext) => {
            try {
                let tokens = plaintext.split('_');
                let licenseDate = new Date(tokens[6]);
                if (tokens.length !== 5) {
                    __classPrivateFieldSet(this, _LicenseManager_valid, false, "f");
                }
                else if (tokens[0].length !== 2) {
                    __classPrivateFieldSet(this, _LicenseManager_valid, false, "f");
                }
                else if (isNaN(parseInt(tokens[1]))) {
                    __classPrivateFieldSet(this, _LicenseManager_valid, false, "f");
                }
                else if (licenseDate <= new Date()) {
                    __classPrivateFieldSet(this, _LicenseManager_valid, false, "f");
                }
                else if (tokens[3] !== 'PRIMENG') {
                    __classPrivateFieldSet(this, _LicenseManager_valid, false, "f");
                }
                else if (tokens[4].length !== 6) {
                    __classPrivateFieldSet(this, _LicenseManager_valid, false, "f");
                }
                else {
                    __classPrivateFieldSet(this, _LicenseManager_valid, true, "f");
                }
            }
            catch (e) {
                __classPrivateFieldSet(this, _LicenseManager_valid, false, "f");
            }
        })
            .catch(() => {
            __classPrivateFieldSet(this, _LicenseManager_valid, false, "f");
        });
    }
    async aesGcmDecrypt(ciphertext, password) {
        const pwUtf8 = new TextEncoder().encode(password);
        const pwHash = await crypto.subtle.digest('SHA-256', pwUtf8);
        const ivStr = atob(ciphertext).slice(0, 12);
        const iv = new Uint8Array(Array.from(ivStr).map((ch) => ch.charCodeAt(0)));
        const alg = { name: 'AES-GCM', iv: iv };
        const key = await crypto.subtle.importKey('raw', pwHash, alg, false, ['decrypt']);
        const ctStr = atob(ciphertext).slice(12);
        const ctUint8 = new Uint8Array(Array.from(ctStr).map((ch) => ch.charCodeAt(0)));
        try {
            const plainBuffer = await crypto.subtle.decrypt(alg, key, ctUint8);
            const plaintext = new TextDecoder().decode(plainBuffer);
            return plaintext;
        }
        catch (e) {
            throw new Error('Decrypt failed');
        }
    }
}
_LicenseManager_valid = new WeakMap();
LicenseManager.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.7", ngImport: i0, type: LicenseManager, deps: [{ token: i0.RendererFactory2 }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
LicenseManager.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.0.7", ngImport: i0, type: LicenseManager, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.7", ngImport: i0, type: LicenseManager, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i0.RendererFactory2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,